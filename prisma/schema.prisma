// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum UserRole {
  SYS_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
  PARENT
  STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StaffType {
  TEACHER
  ADMIN
  SUPPORT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeInterval {
  ONE_TIME
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum ConcessionType {
  PERCENTAGE
  FIXED
}

enum PenaltyType {
  PERCENTAGE
  FIXED
}

enum PenaltyFrequency {
  DAILY
  ONE_TIME
}

enum FeeInvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  COMPLETED
  PENDING_VERIFICATION
  FAILED
}

enum LearningMaterialType {
  VIDEO
  DOCUMENT
  AUDIO
  IMAGE
  OTHER
}

enum TestType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
}

enum TestStatus {
  DRAFT
  UPCOMING
  ACTIVE
  COMPLETED
}

enum ResultVisibility {
  IMMEDIATE
  AFTER_END_TIME
}

enum GradingType {
  DECIMAL
  LETTER
}

enum TestSubmissionStatus {
  IN_PROGRESS
  COMPLETED
  AWAITING_APPROVAL
  GRADED
}

enum ExamResultStatus {
  PENDING
  PENDING_APPROVAL
  APPROVED
  PENDING_REAPPROVAL
  FINALIZED
}

enum LiveSessionStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

// --- Main Models ---

model School {
  id            String         @id @default(cuid())
  name          String
  accountName   String         @unique
  branch        String
  contactPerson String
  phone         String
  address       String
  logoUrl       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         User[]
  grades        Grade[]
  sections      Section[]
  courses       Course[]
  academicYears AcademicYear[]
  feeStructures FeeStructure[]
  penaltyRules  PenaltyRule[]
  concessions   Concession[]
  materials     LearningMaterial[]
  tests         Test[]
  exams         Exam[]
  liveSessions  LiveSession[]
}

model User {
  id              String           @id @default(cuid())
  phone           String           @unique
  password        String
  role            UserRole
  firstName       String
  lastName        String
  middleName      String?
  email           String?          @unique
  photoUrl        String?
  addressLine1    String?
  city            String?
  state           String?
  zipCode         String?
  schoolId        String
  school          School           @relation(fields: [schoolId], references: [id])
  studentProfile  Student?
  staffProfile    Staff?
  parentProfile   Parent?
  sentMessages    Communication[]  @relation("Sender")
  receivedMessage Communication[]  @relation("Receiver")
  markedAttendace Attendance[]
  uploadedMaterials LearningMaterial[]
  createdTests    Test[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Student {
  id                       String                    @id @default(cuid())
  userId                   String                    @unique
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName                String
  lastName                 String
  dob                      DateTime
  gender                   Gender
  schoolId                 String
  school                   School                    @relation(fields: [schoolId], references: [id])
  gradeId                  String
  grade                    Grade                     @relation(fields: [gradeId], references: [id])
  sectionId                String
  section                  Section                   @relation(fields: [sectionId], references: [id])
  enrollments              Enrollment[]
  parents                  Parent[]                  @relation("StudentParents")
  attendances              Attendance[]
  concessionAssignments    ConcessionAssignment[]
  feeInvoices              FeeInvoice[]
  testSubmissions          TestSubmission[]
  examResults              ExamResult[]
  liveSessionRegistrations LiveSessionRegistration[]
  communications           Communication[]
}

model Staff {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  staffType StaffType
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id])
  courses   Course[]
  liveSessions LiveSession[]
}

model Parent {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName         String
  lastName          String
  relationToStudent String
  schoolId          String
  school            School    @relation(fields: [schoolId], references: [id])
  children          Student[] @relation("StudentParents")
}

model Grade {
  id        String   @id @default(cuid())
  name      String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  sections  Section[]
  students  Student[]
  courses   Course[]
  materials LearningMaterial[]
  tests     Test[]
  exams     Exam[]
  liveSessions LiveSession[]

  @@unique([name, schoolId])
}

model Section {
  id        String   @id @default(cuid())
  name      String
  gradeId   String? // Optional for school-wide sections
  grade     Grade?   @relation(fields: [gradeId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  students  Student[]
  courses   Course[]
  tests     Test[]
  exams     Exam[]

  @@unique([name, gradeId, schoolId])
}

model AcademicYear {
  id                    String                 @id @default(cuid())
  name                  String
  isCurrent             Boolean                @default(false)
  schoolId              String
  school                School                 @relation(fields: [schoolId], references: [id])
  enrollments           Enrollment[]
  concessionAssignments ConcessionAssignment[]
  feeInvoices           FeeInvoice[]
  exams                 Exam[]

  @@unique([name, schoolId])
}

// --- Academics ---

model Course {
  id          String       @id @default(cuid())
  name        String
  gradeId     String
  grade       Grade        @relation(fields: [gradeId], references: [id])
  sectionId   String
  section     Section      @relation(fields: [sectionId], references: [id])
  teacherId   String
  teacher     Staff        @relation(fields: [teacherId], references: [id])
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id])
  enrollments Enrollment[]

  @@unique([name, gradeId, sectionId, schoolId])
}

model Enrollment {
  id             String         @id @default(cuid())
  studentId      String
  student        Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course         @relation(fields: [courseId], references: [id])
  academicYearId String
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id])
  results        Result[]

  @@unique([studentId, courseId, academicYearId])
}

model Result {
  id           String     @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  grade        String
  examType     String?
  date         DateTime   @default(now())
}

// --- Attendance ---

model Attendance {
  id         String   @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  date       DateTime
  status     AttendanceStatus
  notes      String?
  markedById String
  markedBy   User     @relation(fields: [markedById], references: [id])

  @@unique([studentId, date])
}

// --- Fees ---

model FeeStructure {
  id            String         @id @default(cuid())
  name          String
  amount        Float
  interval      FeeInterval
  penaltyRuleId String?
  penaltyRule   PenaltyRule?   @relation(fields: [penaltyRuleId], references: [id])
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
  invoices      FeeInvoice[]
  concessions   Concession[]   @relation("FeeStructureConcessions")
}

model PenaltyRule {
  id          String         @id @default(cuid())
  name        String
  gracePeriod Int
  schoolId    String
  school      School         @relation(fields: [schoolId], references: [id])
  tiers       PenaltyTier[]
  structures  FeeStructure[]
}

model PenaltyTier {
  id        String           @id @default(cuid())
  ruleId    String
  rule      PenaltyRule      @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  fromDay   Int
  toDay     Int?
  value     Float
  type      PenaltyType
  frequency PenaltyFrequency
}

model Concession {
  id                  String                 @id @default(cuid())
  name                String
  type                ConcessionType
  value               Float
  description         String?
  schoolId            String
  school              School                 @relation(fields: [schoolId], references: [id])
  assignments         ConcessionAssignment[]
  feeStructures       FeeStructure[]         @relation("FeeStructureConcessions")
}

model ConcessionAssignment {
  id             String       @id @default(cuid())
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  concessionId   String
  concession     Concession   @relation(fields: [concessionId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  feeInvoice     FeeInvoice?  @relation(fields: [feeInvoiceId], references: [id])
  feeInvoiceId   String?

  @@unique([studentId, concessionId, academicYearId])
}

model FeeInvoice {
  id                    String                 @id @default(cuid())
  studentId             String
  student               Student                @relation(fields: [studentId], references: [id])
  feeStructureId        String
  feeStructure          FeeStructure           @relation(fields: [feeStructureId], references: [id])
  academicYearId        String
  academicYear          AcademicYear           @relation(fields: [academicYearId], references: [id])
  amount                Float
  dueDate               DateTime
  status                FeeInvoiceStatus
  payments              FeePayment[]
  concessionAssignments ConcessionAssignment[]
}

model FeePayment {
  id                String        @id @default(cuid())
  invoiceId         String
  invoice           FeeInvoice    @relation(fields: [invoiceId], references: [id])
  amount            Float
  paymentDate       DateTime
  method            String
  status            PaymentStatus
  reference         String?
  verifiedById      String?
  schoolId          String
  school            School        @relation(fields: [schoolId], references: [id])
}

// --- Communication ---

model Communication {
  id         String   @id @default(cuid())
  schoolId   String
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  senderId   String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  subject    String
  message    String
  isRead     Boolean  @default(false)
  sentAt     DateTime @default(now())
}

// --- E-Learning ---

model LearningMaterial {
  id          String               @id @default(cuid())
  title       String
  description String?
  subject     String
  gradeId     String
  grade       Grade                @relation(fields: [gradeId], references: [id])
  type        LearningMaterialType
  url         String?
  schoolId    String
  school      School               @relation(fields: [schoolId], references: [id])
  uploaderId  String
  uploader    User                 @relation(fields: [uploaderId], references: [id])
  createdAt   DateTime             @default(now())
}

// --- Tests ---

model Test {
  id               String               @id @default(cuid())
  name             String
  gradeId          String
  grade            Grade                @relation(fields: [gradeId], references: [id])
  sectionId        String
  section          Section              @relation(fields: [sectionId], references: [id])
  subject          String
  teacherId        String
  teacher          User                 @relation(fields: [teacherId], references: [id])
  startTime        DateTime
  endTime          DateTime
  duration         Int
  totalMarks       Int
  isMock           Boolean
  resultVisibility ResultVisibility
  status           TestStatus           @default(UPCOMING)
  schoolId         String
  school           School               @relation(fields: [schoolId], references: [id])
  questions        Question[]
  submissions      TestSubmission[]
}

model Question {
  id            String         @id @default(cuid())
  testId        String
  test          Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  text          String
  type          TestType
  options       String
  correctAnswer String
  points        Int
  answers       TestAnswer[]
}

model TestSubmission {
  id         String               @id @default(cuid())
  testId     String
  test       Test                 @relation(fields: [testId], references: [id], onDelete: Cascade)
  studentId  String
  student    Student              @relation(fields: [studentId], references: [id])
  submittedAt DateTime             @default(now())
  score      Float
  status     TestSubmissionStatus
  answers    TestAnswer[]
}

model TestAnswer {
  id           String         @id @default(cuid())
  submissionId String
  submission   TestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id])
  answer       String
}

// --- Exams ---

model Exam {
  id             String           @id @default(cuid())
  name           String
  weightage      Float
  totalMarks     Float
  gradingType    GradingType
  academicYearId String
  academicYear   AcademicYear     @relation(fields: [academicYearId], references: [id])
  gradeId        String
  grade          Grade            @relation(fields: [gradeId], references: [id])
  sectionId      String
  section        Section          @relation(fields: [sectionId], references: [id])
  subject        String
  schoolId       String
  school         School           @relation(fields: [schoolId], references: [id])
  results        ExamResult[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ExamResult {
  id        String           @id @default(cuid())
  examId    String
  exam      Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentId String
  student   Student          @relation(fields: [studentId], references: [id])
  score     String
  status    ExamResultStatus

  @@unique([examId, studentId])
}

// --- Live Sessions ---
model LiveSession {
  id            String                    @id @default(cuid())
  topic         String
  description   String?
  subject       String
  gradeId       String
  grade         Grade                     @relation(fields: [gradeId], references: [id])
  startTime     DateTime
  duration      Int // in minutes
  fee           Float                     @default(0)
  status        LiveSessionStatus
  teacherId     String
  teacher       Staff                     @relation(fields: [teacherId], references: [id])
  schoolId      String
  school        School                    @relation(fields: [schoolId], references: [id])
  registrations LiveSessionRegistration[]
}

model LiveSessionRegistration {
  id            String      @id @default(cuid())
  liveSessionId String
  liveSession   LiveSession @relation(fields: [liveSessionId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id])
  registeredAt  DateTime    @default(now())

  @@unique([liveSessionId, studentId])
}
