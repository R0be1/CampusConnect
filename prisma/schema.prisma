// prisma/schema.prisma
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// --- Enums as Strings ---

// --- Core Models ---
model School {
  id              String           @id @default(cuid())
  name            String
  accountName     String           @unique
  branch          String
  contactPerson   String
  phone           String
  address         String
  logoUrl         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users           User[]
  academicYears   AcademicYear[]
  grades          Grade[]
  sections        Section[]
  courses         Course[]
  feeStructures   FeeStructure[]
  concessions     Concession[]
  penaltyRules    PenaltyRule[]
  students        Student[]
  staff           Staff[]
  parents         Parent[]
  communications  Communication[]
  learningMaterials LearningMaterial[]
  tests           Test[]
  liveSessions    LiveSession[]
}

model User {
  id              String        @id @default(cuid())
  phone           String        @unique
  password        String
  role            String // Replaced enum UserRole
  schoolId        String
  school          School        @relation(fields: [schoolId], references: [id])
  firstName       String
  lastName        String
  middleName      String?
  photoUrl        String?
  addressLine1    String?
  city            String?
  state           String?
  zipCode         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  staffProfile    Staff?
  studentProfile  Student?
  parentProfile   Parent?
  sentCommunications Communication[] @relation("SentCommunications")
  receivedCommunications Communication[] @relation("ReceivedCommunications")
  attendanceMarked Attendance[]
  materialsUploaded LearningMaterial[]
  testsCreated    Test[]
  liveSessionsCreated LiveSession[]
}

model Staff {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  firstName String
  lastName  String
  staffType String // Replaced enum StaffType
  courses   Course[]
  attendance Attendance[] @relation("AttendanceMarkedBy")
}

model Student {
  id                 String                  @id @default(cuid())
  userId             String                  @unique
  user               User                    @relation(fields: [userId], references: [id])
  schoolId           String
  school             School                  @relation(fields: [schoolId], references: [id])
  gradeId            String
  grade              Grade                   @relation(fields: [gradeId], references: [id])
  sectionId          String
  section            Section                 @relation(fields: [sectionId], references: [id])
  firstName          String
  lastName           String
  dob                DateTime
  gender             String // Replaced enum Gender
  enrollments        Enrollment[]
  attendances        Attendance[]
  communications     Communication[]
  feeInvoices        FeeInvoice[]
  concessionAssignments ConcessionAssignment[]
  testSubmissions    TestSubmission[]
  examResults        ExamResult[]
  liveSessionRegistrations LiveSessionRegistration[]
  parents            Parent[]                @relation("StudentParents")
}

model Parent {
  id                 String    @id @default(cuid())
  userId             String    @unique
  user               User      @relation(fields: [userId], references: [id])
  schoolId           String
  school             School    @relation(fields: [schoolId], references: [id])
  firstName          String
  lastName           String
  relationToStudent  String?
  children           Student[] @relation("StudentParents")
}

model Grade {
  id            String         @id @default(cuid())
  name          String
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
  students      Student[]
  courses       Course[]
  exams         Exam[]
  tests         Test[]
  learningMaterials LearningMaterial[]
  liveSessions  LiveSession[]
  
  @@unique([name, schoolId])
}

model Section {
  id            String         @id @default(cuid())
  name          String
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
  students      Student[]
  courses       Course[]
  exams         Exam[]
  tests         Test[]

  @@unique([name, schoolId])
}

model Course {
  id            String       @id @default(cuid())
  name          String
  schoolId      String
  school        School       @relation(fields: [schoolId], references: [id])
  gradeId       String
  grade         Grade        @relation(fields: [gradeId], references: [id])
  sectionId     String
  section       Section      @relation(fields: [sectionId], references: [id])
  teacherId     String
  teacher       Staff        @relation(fields: [teacherId], references: [id])
  enrollments   Enrollment[]
  
  @@unique([name, gradeId, sectionId])
}

model Enrollment {
  id             String    @id @default(cuid())
  studentId      String
  student        Student   @relation(fields: [studentId], references: [id])
  courseId       String
  course         Course    @relation(fields: [courseId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  results        Result[]
}

model Attendance {
  id         String   @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  date       DateTime
  status     String // Replaced enum AttendanceStatus
  notes      String?
  markedById String
  markedBy   Staff    @relation("AttendanceMarkedBy", fields: [markedById], references: [userId])

  @@unique([studentId, date])
}

model Communication {
  id         String   @id @default(cuid())
  schoolId   String
  school     School   @relation(fields: [schoolId], references: [id])
  senderId   String
  sender     User     @relation("SentCommunications", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedCommunications", fields: [receiverId], references: [id])
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  subject    String
  message    String
  sentAt     DateTime @default(now())
}

model Result {
  id           String     @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  grade        String
  createdAt    DateTime   @default(now())
}

model AcademicYear {
  id            String       @id @default(cuid())
  name          String
  isCurrent     Boolean      @default(false)
  schoolId      String
  school        School       @relation(fields: [schoolId], references: [id])
  enrollments   Enrollment[]
  feeInvoices   FeeInvoice[]
  exams         Exam[]
  concessionAssignments ConcessionAssignment[]
  
  @@unique([name, schoolId])
}

model FeeStructure {
  id           String      @id @default(cuid())
  name         String
  amount       Float
  interval     String // Replaced enum FeeInterval
  schoolId     String
  school       School      @relation(fields: [schoolId], references: [id])
  penaltyRuleId String?
  penaltyRule  PenaltyRule? @relation(fields: [penaltyRuleId], references: [id])
  invoices     FeeInvoice[]
  concessions  Concession[] @relation("FeeConcessions")
}

model PenaltyRule {
  id            String         @id @default(cuid())
  name          String
  gracePeriod   Int // in days
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
  tiers         PenaltyTier[]
  feeStructures FeeStructure[]
}

model PenaltyTier {
  id          String   @id @default(cuid())
  ruleId      String
  rule        PenaltyRule @relation(fields: [ruleId], references: [id])
  fromDay     Int
  toDay       Int?
  value       Float
  type        String // Replaced enum PenaltyType
  frequency   String // Replaced enum PenaltyFrequency
}

model Concession {
  id            String       @id @default(cuid())
  name          String
  type          String // Replaced enum ConcessionType
  value         Float
  description   String?
  schoolId      String
  school        School       @relation(fields: [schoolId], references: [id])
  feeStructures FeeStructure[] @relation("FeeConcessions")
  assignments   ConcessionAssignment[]
}

model ConcessionAssignment {
    id              String      @id @default(cuid())
    studentId       String
    student         Student     @relation(fields: [studentId], references: [id])
    concessionId    String
    concession      Concession  @relation(fields: [concessionId], references: [id])
    academicYearId  String
    academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
    invoices        FeeInvoice[]
    
    @@unique([studentId, concessionId, academicYearId])
}

model FeeInvoice {
  id           String   @id @default(cuid())
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id])
  feeStructureId String
  feeStructure FeeStructure @relation(fields: [feeStructureId], references: [id])
  academicYearId String
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  amount       Float
  dueDate      DateTime
  status       String // Replaced enum FeeInvoiceStatus
  payments     FeePayment[]
  lateFee      Float      @default(0)
  concessionAssignments ConcessionAssignment[]
}

model FeePayment {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     FeeInvoice @relation(fields: [invoiceId], references: [id])
  schoolId    String
  amount      Float
  paymentDate DateTime
  method      String
  status      String // Replaced enum PaymentStatus
  reference   String?
  notes       String?
}

model LearningMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String // Replaced enum LearningMaterialType
  subject     String
  url         String?
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  gradeId     String
  grade       Grade    @relation(fields: [gradeId], references: [id])
  uploaderId  String
  uploader    User     @relation(fields: [uploaderId], references: [id])
  createdAt   DateTime @default(now())
}

model Test {
  id                 String         @id @default(cuid())
  name               String
  schoolId           String
  school             School         @relation(fields: [schoolId], references: [id])
  gradeId            String
  grade              Grade          @relation(fields: [gradeId], references: [id])
  sectionId          String
  section            Section        @relation(fields: [sectionId], references: [id])
  subject            String
  teacherId          String
  teacher            User           @relation(fields: [teacherId], references: [id])
  startTime          DateTime
  endTime            DateTime
  duration           Int // In minutes
  totalMarks         Int
  status             String         @default("UPCOMING") // Replaced enum TestStatus
  isMock             Boolean        @default(false)
  resultVisibility   String         @default("IMMEDIATE") // Replaced enum TestResultVisibility
  questions          Question[]
  submissions        TestSubmission[]
  createdAt          DateTime       @default(now())
}

model Question {
  id            String          @id @default(cuid())
  testId        String
  test          Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
  text          String
  type          String // Replaced enum QuestionType
  options       String
  correctAnswer String
  points        Int
  answers       TestAnswer[]
}

model TestSubmission {
  id        String       @id @default(cuid())
  testId    String
  test      Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  studentId String
  student   Student      @relation(fields: [studentId], references: [id])
  submittedAt DateTime   @default(now())
  score     Int
  status    String       @default("AWAITING_APPROVAL") // PENDING, AWAITING_APPROVAL, GRADED
  answers   TestAnswer[]
}

model TestAnswer {
  id           String         @id @default(cuid())
  submissionId String
  submission   TestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer       String
}

model Exam {
  id             String       @id @default(cuid())
  name           String
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  gradeId        String
  grade          Grade        @relation(fields: [gradeId], references: [id])
  sectionId      String
  section        Section      @relation(fields: [sectionId], references: [id])
  subject        String
  weightage      Float
  gradingType    String       @default("DECIMAL") // DECIMAL, LETTER
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id])
  results        ExamResult[]
}

model ExamResult {
  id        String   @id @default(cuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  score     String
  status    String   @default("PENDING") // Replaced enum ResultStatus
  createdAt DateTime @default(now())
  
  @@unique([examId, studentId])
}


model LiveSession {
  id            String                  @id @default(cuid())
  topic         String
  description   String?
  subject       String
  schoolId      String
  school        School                  @relation(fields: [schoolId], references: [id])
  gradeId       String
  grade         Grade                   @relation(fields: [gradeId], references: [id])
  teacherId     String
  teacher       User                    @relation(fields: [teacherId], references: [id])
  startTime     DateTime
  duration      Int // In minutes
  status        String                  @default("UPCOMING") // UPCOMING, ACTIVE, COMPLETED
  fee           Float                   @default(0)
  meetingUrl    String?
  registrations LiveSessionRegistration[]
}

model LiveSessionRegistration {
  id            String      @id @default(cuid())
  liveSessionId String
  liveSession   LiveSession @relation(fields: [liveSessionId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id])
  registeredAt  DateTime    @default(now())
  
  @@unique([liveSessionId, studentId])
}
