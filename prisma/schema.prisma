// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Core Models ---

model School {
  id           String @id @default(cuid())
  name         String
  accountName  String @unique
  branch       String
  contactPerson String
  phone        String
  address      String
  logoUrl      String

  users             User[]
  staff             Staff[]
  students          Student[]
  parents           Parent[]
  grades            Grade[]
  sections          Section[]
  courses           Course[]
  academicYears     AcademicYear[]
  feeStructures     FeeStructure[]
  penaltyRules      PenaltyRule[]
  concessions       Concession[]
  communications    Communication[]
  learningMaterials LearningMaterial[]
  tests             Test[]
  exams             Exam[]
  feePayments       FeePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String @id @default(cuid())
  phone        String @unique
  password     String
  role         String // ADMIN, TEACHER, STUDENT, PARENT, SYSTEM_ADMIN
  firstName    String
  lastName     String
  middleName   String?
  addressLine1 String?
  city         String?
  state        String?
  zipCode      String?
  photoUrl     String?
  
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  staffProfile    Staff?
  studentProfile  Student?
  parentProfile   Parent?
  
  createdTests     Test[]
  markedAttendance Attendance[]

  sentCommunications     Communication[] @relation("SentCommunications")
  receivedCommunications Communication[] @relation("ReceivedCommunications")

  uploadedMaterials LearningMaterial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Profile Models ---

model Staff {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  staffType String  // TEACHER, ADMIN, ACCOUNTANT etc.
  
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  coursesTaught Course[]
  attendanceMarked Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  dob       DateTime
  gender    String // MALE, FEMALE, OTHER
  
  schoolId  String
  school    School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  gradeId   String
  grade     Grade  @relation(fields: [gradeId], references: [id])
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])

  parents              Parent[]              @relation("StudentParents")
  enrollments          Enrollment[]
  attendances          Attendance[]
  communications       Communication[]
  feeInvoices          FeeInvoice[]
  concessionAssignments ConcessionAssignment[]
  testSubmissions      TestSubmission[]
  examResults          ExamResult[]
  liveSessionRegistrations LiveSessionRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Parent {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  relationToStudent String?
  
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  children Student[] @relation("StudentParents")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Academic Structure ---

model AcademicYear {
  id      String @id @default(cuid())
  name    String // e.g., "2024-2025"
  isCurrent Boolean @default(false)
  schoolId String
  school  School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  enrollments Enrollment[]
  feeInvoices FeeInvoice[]
  concessionAssignments ConcessionAssignment[]
  exams       Exam[]

  @@unique([name, schoolId])
}

model Grade {
  id       String @id @default(cuid())
  name     String // e.g., "Grade 10"
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  students          Student[]
  courses           Course[]
  learningMaterials LearningMaterial[]
  tests             Test[]
  exams             Exam[]
  sections          Section[] @relation("GradeSections")

  @@unique([name, schoolId])
}

model Section {
  id        String  @id @default(cuid())
  name      String  // e.g., "A"
  schoolId  String
  school    School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  students Student[]
  courses  Course[]
  tests    Test[]
  exams    Exam[]
  
  grades Grade[] @relation("GradeSections")

  @@unique([name, schoolId])
}

model Course {
  id        String   @id @default(cuid())
  name      String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  gradeId   String
  grade     Grade    @relation(fields: [gradeId], references: [id])
  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id])
  teacherId String
  teacher   Staff    @relation(fields: [teacherId], references: [id])

  enrollments Enrollment[]
}

model Enrollment {
  id             String @id @default(cuid())
  studentId      String
  student        Student @relation(fields: [studentId], references: [id])
  courseId       String
  course         Course @relation(fields: [courseId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  
  results Result[]

  @@unique([studentId, courseId, academicYearId])
}

model Result {
    id String @id @default(cuid())
    enrollmentId String
    enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
    grade String
    
    createdAt DateTime @default(now())
}

// --- Attendance ---

model Attendance {
  id         String   @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  date       DateTime @db.Date
  status     String   // PRESENT, ABSENT, LATE, EXCUSED
  notes      String?
  markedById String
  markedBy   User     @relation(fields: [markedById], references: [id])

  @@unique([studentId, date])
}

// --- Communication ---

model Communication {
  id          String   @id @default(cuid())
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  senderId    String
  sender      User     @relation("SentCommunications", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedCommunications", fields: [receiverId], references: [id])
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
  subject     String
  message     String   @db.Text
  sentAt      DateTime @default(now())
}

// --- E-Learning ---

model LearningMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  subject     String
  gradeId     String
  grade       Grade    @relation(fields: [gradeId], references: [id])
  type        String   // VIDEO, DOCUMENT, etc.
  url         String?  // URL to the material
  
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  uploaderId  String
  uploader    User     @relation(fields: [uploaderId], references: [id])
  
  createdAt   DateTime @default(now())
}

// --- Fees ---

model FeeStructure {
  id            String      @id @default(cuid())
  name          String
  amount        Float
  interval      String      // ONE_TIME, MONTHLY, QUARTERLY, ANNUALLY
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id])
  penaltyRuleId String?
  penaltyRule   PenaltyRule? @relation(fields: [penaltyRuleId], references: [id])
  invoices      FeeInvoice[]
  concessions   Concession[] @relation("FeeStructureConcessions")
}

model PenaltyRule {
  id          String        @id @default(cuid())
  name        String
  gracePeriod Int           // in days
  schoolId    String
  school      School        @relation(fields: [schoolId], references: [id])
  tiers       PenaltyTier[]
  feeStructures FeeStructure[]
}

model PenaltyTier {
  id          String      @id @default(cuid())
  ruleId      String
  rule        PenaltyRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  fromDay     Int
  toDay       Int?
  value       Float
  type        String      // PERCENTAGE or FIXED
  frequency   String      // DAILY or ONE_TIME
}

model FeeInvoice {
  id             String      @id @default(cuid())
  studentId      String
  student        Student     @relation(fields: [studentId], references: [id])
  feeStructureId String
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  amount         Float
  dueDate        DateTime
  status         String      // PENDING, PAID, OVERDUE, WAIVED
  
  payments       FeePayment[]
  concessionAssignments ConcessionAssignment[]
}

model FeePayment {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     FeeInvoice @relation(fields: [invoiceId], references: [id])
  amount      Float
  paymentDate DateTime
  method      String   // BANK_TRANSFER, CASH, etc.
  status      String   // PENDING_VERIFICATION, COMPLETED, FAILED
  reference   String?
  
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])

  createdAt   DateTime @default(now())
}

model Concession {
  id          String   @id @default(cuid())
  name        String
  type        String   // PERCENTAGE or FIXED
  value       Float
  description String?
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  
  feeStructures       FeeStructure[]       @relation("FeeStructureConcessions")
  concessionAssignments ConcessionAssignment[]
}

model ConcessionAssignment {
  id             String     @id @default(cuid())
  studentId      String
  student        Student    @relation(fields: [studentId], references: [id])
  concessionId   String
  concession     Concession @relation(fields: [concessionId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  
  invoiceId String?
  invoice   FeeInvoice? @relation(fields: [invoiceId], references: [id])

  @@unique([studentId, concessionId, academicYearId])
}


// --- Tests ---

model Test {
  id               String           @id @default(cuid())
  name             String
  gradeId          String
  sectionId        String
  subject          String
  teacherId        String
  startTime        DateTime
  endTime          DateTime
  duration         Int // in minutes
  totalMarks       Int
  isMock           Boolean          @default(false)
  resultVisibility String // IMMEDIATE, AFTER_END_TIME
  status           String           @default("UPCOMING") // UPCOMING, ACTIVE, COMPLETED

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  teacher    User             @relation(fields: [teacherId], references: [id])
  grade      Grade            @relation(fields: [gradeId], references: [id])
  section    Section          @relation(fields: [sectionId], references: [id])
  questions  Question[]
  submissions TestSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id            String   @id @default(cuid())
  testId        String
  test          Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  text          String
  type          String   // MULTIPLE_CHOICE, TRUE_FALSE, FILL_IN_THE_BLANK
  options       String[]
  correctAnswer String
  points        Int
}

model TestSubmission {
  id          String        @id @default(cuid())
  testId      String
  test        Test          @relation(fields: [testId], references: [id], onDelete: Cascade)
  studentId   String
  student     Student       @relation(fields: [studentId], references: [id])
  submittedAt DateTime      @default(now())
  score       Int
  status      String        // AWAITING_APPROVAL, GRADED
  answers     TestAnswer[]

  @@unique([testId, studentId])
}

model TestAnswer {
  id           String         @id @default(cuid())
  submissionId String
  submission   TestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer       String
}

// --- Exams ---

enum ResultStatus {
  PENDING
  PENDING_APPROVAL
  PENDING_REAPPROVAL
  APPROVED
  FINALIZED
}

model Exam {
  id             String       @id @default(cuid())
  name           String
  weightage      Float
  gradingType    String       // LETTER, DECIMAL
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  gradeId        String
  grade          Grade        @relation(fields: [gradeId], references: [id])
  sectionId      String
  section        Section      @relation(fields: [sectionId], references: [id])
  subject        String
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id])

  results ExamResult[]
}

model ExamResult {
  id        String       @id @default(cuid())
  examId    String
  exam      Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentId String
  student   Student      @relation(fields: [studentId], references: [id])
  score     String
  status    ResultStatus @default(PENDING)

  @@unique([examId, studentId])
}

// --- Live Sessions ---

model LiveSession {
  id            String   @id @default(cuid())
  topic         String
  description   String?
  subject       String
  grade         String
  startTime     DateTime
  duration      Int      // in minutes
  fee           Float    @default(0)
  teacherId     String
  // teacher    User     @relation(fields: [teacherId], references: [id])
  
  registrations LiveSessionRegistration[]
}

model LiveSessionRegistration {
  id            String      @id @default(cuid())
  sessionId     String
  session       LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id])
  registeredAt  DateTime    @default(now())

  @@unique([sessionId, studentId])
}
