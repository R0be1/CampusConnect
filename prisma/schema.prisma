
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- CORE MODELS ---

model School {
  id              String   @id @default(cuid())
  name            String
  accountName     String   @unique
  branch          String
  contactPerson   String
  phone           String
  address         String
  logoUrl         String?
  users           User[]
  academicYears   AcademicYear[]
  grades          Grade[]
  sections        Section[]
  courses         Course[]
  students        Student[]
  staff           Staff[]
  parents         Parent[]
  communications  Communication[]
  learningMaterials LearningMaterial[]
  liveSessions    LiveSession[]
  feeStructures   FeeStructure[]
  concessions     Concession[]
  penaltyRules    PenaltyRule[]
  feePayments     FeePayment[]
  tests           Test[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                      String    @id @default(cuid())
  phone                   String    @unique
  password                String
  role                    String // 'ADMIN', 'TEACHER', 'STUDENT', 'PARENT', 'SYSTEM_ADMIN'
  firstName               String
  middleName              String?
  lastName                String
  addressLine1            String?
  city                    String?
  state                   String?
  zipCode                 String?
  photoUrl                String?
  
  school    School @relation(fields: [schoolId], references: [id])
  schoolId  String

  // Relationships to specific profiles
  staffProfile      Staff?
  studentProfile    Student?
  parentProfile     Parent?

  // Communication relationships
  sentCommunications     Communication[] @relation("SentCommunications")
  receivedCommunications Communication[] @relation("ReceivedCommunications")

  // Attendance marker
  markedAttendance Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id            String   @id @default(cuid())
  name          String   // e.g., "2024-2025"
  isCurrent     Boolean  @default(false)
  school        School   @relation(fields: [schoolId], references: [id])
  schoolId      String
  enrollments   Enrollment[]
  feeInvoices   FeeInvoice[]

  @@unique([name, schoolId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id            String   @id @default(cuid())
  name          String   // e.g., "Grade 10"
  school        School   @relation(fields: [schoolId], references: [id])
  schoolId      String
  sections      Section[] @relation("GradeSections")
  students      Student[]
  courses       Course[]
  learningMaterials LearningMaterial[]
  tests         Test[]

  @@unique([name, schoolId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id            String   @id @default(cuid())
  name          String   // e.g., "A"
  school        School   @relation(fields: [schoolId], references: [id])
  schoolId      String
  grade         Grade    @relation("GradeSections", fields: [gradeId], references: [id])
  gradeId       String
  students      Student[]
  courses       Course[]
  tests         Test[]

  @@unique([name, gradeId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- USER PROFILE MODELS ---

model Staff {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  firstName     String
  lastName      String
  staffType     String   // e.g., 'TEACHER', 'ADMIN', 'PRINCIPAL'
  school        School   @relation(fields: [schoolId], references: [id])
  schoolId      String
  
  // Relationships
  coursesTaught Course[]
  attendanceMarked Attendance[]
  uploadedMaterials LearningMaterial[]
  scheduledSessions LiveSession[]
  conductedTests  Test[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                String       @id @default(cuid())
  user              User         @relation(fields: [userId], references: [id])
  userId            String       @unique
  firstName         String
  lastName          String
  dob               DateTime
  gender            String
  school            School       @relation(fields: [schoolId], references: [id])
  schoolId          String
  grade             Grade        @relation(fields: [gradeId], references: [id])
  gradeId           String
  section           Section      @relation(fields: [sectionId], references: [id])
  sectionId         String

  parents           Parent[]     @relation("StudentParents")
  enrollments       Enrollment[]
  attendance        Attendance[]
  communications    Communication[]
  feeInvoices       FeeInvoice[]
  concessionAssignments ConcessionAssignment[]
  testSubmissions   TestSubmission[]
  liveSessionRegistrations LiveSessionRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Parent {
  id                  String     @id @default(cuid())
  user                User       @relation(fields: [userId], references: [id])
  userId              String     @unique
  firstName           String
  lastName            String
  relationToStudent   String? // e.g., 'Father', 'Mother', 'Guardian'
  school              School     @relation(fields: [schoolId], references: [id])
  schoolId            String
  
  children            Student[]  @relation("StudentParents")
  liveSessionRegistrations LiveSessionRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- ACADEMICS & E-LEARNING ---

model Course {
  id          String   @id @default(cuid())
  name        String
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  grade       Grade    @relation(fields: [gradeId], references: [id])
  gradeId     String
  section     Section  @relation(fields: [sectionId], references: [id])
  sectionId   String
  teacher     Staff    @relation(fields: [teacherId], references: [id])
  teacherId   String
  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id              String   @id @default(cuid())
  student         Student  @relation(fields: [studentId], references: [id])
  studentId       String
  course          Course   @relation(fields: [courseId], references: [id])
  courseId        String
  academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId  String
  results         Result[]

  @@unique([studentId, courseId, academicYearId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id              String      @id @default(cuid())
  enrollment      Enrollment  @relation(fields: [enrollmentId], references: [id])
  enrollmentId    String
  grade           String      // e.g., 'A+', 'B', 'C-'
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningMaterial {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String    // 'VIDEO', 'DOCUMENT', 'PRESENTATION'
  url         String?   // URL to the material
  subject     String
  grade       Grade     @relation(fields: [gradeId], references: [id])
  gradeId     String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  uploader    Staff     @relation(fields: [uploaderId], references: [id])
  uploaderId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  date        DateTime @db.Date
  status      String   // 'PRESENT', 'ABSENT', 'LATE', 'EXCUSED'
  notes       String?
  markedBy    Staff    @relation(fields: [markedById], references: [id])
  markedById  String
  
  @@unique([studentId, date])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- COMMUNICATION ---

model Communication {
  id          String   @id @default(cuid())
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  sender      User     @relation("SentCommunications", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("ReceivedCommunications", fields: [receiverId], references: [id])
  receiverId  String
  student     Student? @relation(fields: [studentId], references: [id])
  studentId   String?
  subject     String
  message     String
  sentAt      DateTime @default(now())
  isRead      Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- FEES & PAYMENTS ---

model FeeStructure {
  id              String   @id @default(cuid())
  name            String   // e.g., 'Tuition Fee - Fall Semester'
  amount          Float
  interval        String   // 'ONE_TIME', 'MONTHLY', 'QUARTERLY', 'ANNUALLY'
  school          School   @relation(fields: [schoolId], references: [id])
  schoolId        String
  
  penaltyRule     PenaltyRule? @relation(fields: [penaltyRuleId], references: [id])
  penaltyRuleId   String?

  invoices        FeeInvoice[]
  applicableConcessions Concession[] @relation("ConcessionFeeStructures")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Concession {
  id          String   @id @default(cuid())
  name        String
  type        String   // 'PERCENTAGE' or 'FIXED'
  value       Float
  description String?
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  
  feeStructures       FeeStructure[] @relation("ConcessionFeeStructures")
  assignments         ConcessionAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PenaltyRule {
  id            String   @id @default(cuid())
  name          String
  gracePeriod   Int      // in days
  school        School   @relation(fields: [schoolId], references: [id])
  schoolId      String
  
  tiers         PenaltyTier[]
  feeStructures FeeStructure[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PenaltyTier {
  id              String      @id @default(cuid())
  penaltyRule     PenaltyRule @relation(fields: [penaltyRuleId], references: [id])
  penaltyRuleId   String
  fromDay         Int         // Penalty starts from this day after due date
  toDay           Int?        // Penalty ends on this day (null for indefinite)
  type            String      // 'PERCENTAGE' or 'FIXED'
  value           Float
  frequency       String      // 'DAILY' or 'ONE_TIME'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeeInvoice {
  id              String   @id @default(cuid())
  student         Student  @relation(fields: [studentId], references: [id])
  studentId       String
  feeStructure    FeeStructure @relation(fields: [feeStructureId], references: [id])
  feeStructureId  String
  academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId  String
  amount          Float    // Base amount from fee structure
  dueDate         DateTime
  status          String   // e.g., 'PENDING', 'PAID', 'OVERDUE', 'CANCELLED'
  
  payments        FeePayment[]
  concessionAssignments ConcessionAssignment[] @relation("InvoiceConcessions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConcessionAssignment {
    id              String      @id @default(cuid())
    student         Student     @relation(fields: [studentId], references: [id])
    studentId       String
    concession      Concession  @relation(fields: [concessionId], references: [id])
    concessionId    String
    academicYearId  String      // To specify which year the concession applies
    invoices        FeeInvoice[] @relation("InvoiceConcessions")
    
    @@unique([studentId, concessionId, academicYearId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FeePayment {
  id          String   @id @default(cuid())
  invoice     FeeInvoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  amount      Float
  paymentDate DateTime @default(now())
  method      String   // e.g., 'BANK_TRANSFER', 'CASH', 'WALLET'
  status      String   // e.g., 'PENDING_VERIFICATION', 'COMPLETED', 'FAILED'
  reference   String?  // Transaction ID or reference number
  notes       String?
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- TESTS & EXAMS ---
model Test {
  id                String      @id @default(cuid())
  name              String
  grade             Grade       @relation(fields: [gradeId], references: [id])
  gradeId           String
  section           Section?    @relation(fields: [sectionId], references: [id])
  sectionId         String?
  subject           String
  teacher           Staff       @relation(fields: [teacherId], references: [id])
  teacherId         String
  startTime         DateTime
  endTime           DateTime
  duration          Int         // in minutes
  totalMarks        Int
  isMock            Boolean     @default(false)
  resultVisibility  String      // 'IMMEDIATE', 'AFTER_END_TIME'
  school            School      @relation(fields: [schoolId], references: [id])
  schoolId          String
  
  questions         Question[]
  submissions       TestSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id              String      @id @default(cuid())
  test            Test        @relation(fields: [testId], references: [id])
  testId          String
  text            String
  type            String      // 'MULTIPLE_CHOICE', 'TRUE_FALSE', 'FILL_IN_THE_BLANK'
  options         String[]    // For MULTIPLE_CHOICE
  correctAnswer   String
  points          Int         @default(1)
  
  answers         TestAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestSubmission {
  id              String      @id @default(cuid())
  test            Test        @relation(fields: [testId], references: [id])
  testId          String
  student         Student     @relation(fields: [studentId], references: [id])
  studentId       String
  submittedAt     DateTime    @default(now())
  score           Int
  status          String      // 'IN_PROGRESS', 'SUBMITTED', 'AWAITING_APPROVAL', 'GRADED'
  
  answers         TestAnswer[]

  @@unique([testId, studentId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestAnswer {
  id            String          @id @default(cuid())
  submission    TestSubmission  @relation(fields: [submissionId], references: [id])
  submissionId  String
  question      Question        @relation(fields: [questionId], references: [id])
  questionId    String
  answer        String

  @@unique([submissionId, questionId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- LIVE SESSIONS ---
model LiveSession {
  id              String      @id @default(cuid())
  topic           String
  description     String?
  subject         String
  gradeId         String?
  teacher         Staff       @relation(fields: [teacherId], references: [id])
  teacherId       String
  startTime       DateTime
  duration        Int         // in minutes
  fee             Float       @default(0)
  school          School      @relation(fields: [schoolId], references: [id])
  schoolId        String
  
  registrations   LiveSessionRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LiveSessionRegistration {
  id              String      @id @default(cuid())
  session         LiveSession @relation(fields: [sessionId], references: [id])
  sessionId       String
  student         Student     @relation(fields: [studentId], references: [id])
  studentId       String
  registeredBy    Parent      @relation(fields: [registeredById], references: [id])
  registeredById  String
  paid            Boolean     @default(false)

  @@unique([sessionId, studentId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
