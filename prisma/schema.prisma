// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model School {
  id              String           @id @default(cuid())
  name            String
  accountName     String           @unique
  branch          String
  contactPerson   String
  phone           String
  address         String
  logoUrl         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users           User[]
  academicYears   AcademicYear[]
  grades          Grade[]
  sections        Section[]
  courses         Course[]
  feeStructures   FeeStructure[]
  penaltyRules    PenaltyRule[]
  concessions     Concession[]
  learningMaterials LearningMaterial[]
  tests           Test[]
  liveSessions    LiveSession[]
  exams           Exam[]
  communications  Communication[]
  feePayments     FeePayment[]
}

model User {
  id                    String                  @id @default(cuid())
  phone                 String                  @unique
  password              String
  role                  String // ADMIN, TEACHER, STUDENT, PARENT
  schoolId              String
  firstName             String
  lastName              String
  middleName            String?
  addressLine1          String?
  city                  String?
  state                 String?
  zipCode               String?
  photoUrl              String?
  school                School                  @relation(fields: [schoolId], references: [id])
  studentProfile        Student?
  staffProfile          Staff?
  parentProfile         Parent?
  sentCommunications    Communication[]         @relation("SentCommunications")
  receivedCommunications Communication[]        @relation("ReceivedCommunications")
  attendanceMarked      Attendance[]            @relation("MarkedBy")
  learningMaterialsUploaded LearningMaterial[]  @relation("UploadedBy")
  testsCreated          Test[]                  @relation("CreatedBy")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Student {
  id                        String                      @id @default(cuid())
  userId                    String                      @unique
  firstName                 String
  lastName                  String
  dob                       DateTime
  gender                    String // MALE, FEMALE, OTHER
  schoolId                  String
  gradeId                   String
  sectionId                 String
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  school                    School                      @relation(fields: [schoolId], references: [id])
  grade                     Grade                       @relation(fields: [gradeId], references: [id])
  section                   Section                     @relation(fields: [sectionId], references: [id])
  enrollments               Enrollment[]
  parents                   Parent[]                    @relation("StudentParents")
  attendances               Attendance[]
  concessionAssignments     ConcessionAssignment[]
  feeInvoices               FeeInvoice[]
  testSubmissions           TestSubmission[]
  examResults               ExamResult[]
  liveSessionRegistrations  LiveSessionRegistration[]
  communications            Communication[]
}

model Staff {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String
  lastName  String
  staffType String // TEACHER, ADMIN, etc.
  schoolId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school    School   @relation(fields: [schoolId], references: [id])
  courses   Course[]
}

model Parent {
  id                String    @id @default(cuid())
  userId            String    @unique
  firstName         String
  lastName          String
  schoolId          String
  relationToStudent String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  school            School    @relation(fields: [schoolId], references: [id])
  children          Student[] @relation("StudentParents")
}

// Academic Structure
model AcademicYear {
  id                  String                 @id @default(cuid())
  name                String // e.g., "2024-2025"
  isCurrent           Boolean                @default(false)
  schoolId            String
  school              School                 @relation(fields: [schoolId], references: [id])
  enrollments         Enrollment[]
  feeInvoices         FeeInvoice[]
  concessionAssignments ConcessionAssignment[]
  exams               Exam[]

  @@unique([name, schoolId])
}

model Grade {
  id        String   @id @default(cuid())
  name      String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  sections  Section[]
  students  Student[]
  courses   Course[]
  learningMaterials LearningMaterial[]
  tests     Test[]
  exams     Exam[]

  @@unique([name, schoolId])
}

model Section {
  id        String   @id @default(cuid())
  name      String
  schoolId  String
  gradeId   String
  school    School   @relation(fields: [schoolId], references: [id])
  grade     Grade    @relation(fields: [gradeId], references: [id])
  students  Student[]
  courses   Course[]
  tests     Test[]
  exams     Exam[]

   @@unique([name, gradeId])
}

model Course {
  id          String       @id @default(cuid())
  name        String
  gradeId     String
  sectionId   String
  teacherId   String
  schoolId    String
  grade       Grade        @relation(fields: [gradeId], references: [id])
  section     Section      @relation(fields: [sectionId], references: [id])
  teacher     Staff        @relation(fields: [teacherId], references: [id])
  school      School       @relation(fields: [schoolId], references: [id])
  enrollments Enrollment[]
  
  @@unique([name, gradeId, sectionId])
}

model Enrollment {
  id             String         @id @default(cuid())
  studentId      String
  courseId       String
  academicYearId String
  student        Student        @relation(fields: [studentId], references: [id])
  course         Course         @relation(fields: [courseId], references: [id])
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id])
  results        Result[]

  @@unique([studentId, courseId, academicYearId])
}

model Result {
  id           String     @id @default(cuid())
  enrollmentId String
  grade        String
  examType     String?
  date         DateTime   @default(now())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
}

// Attendance
model Attendance {
  id         String   @id @default(cuid())
  studentId  String
  date       DateTime
  status     String // PRESENT, ABSENT, LATE, EXCUSED
  notes      String?
  markedById String
  student    Student  @relation(fields: [studentId], references: [id])
  markedBy   User     @relation("MarkedBy", fields: [markedById], references: [id])

  @@unique([studentId, date])
}

// Fees
model FeeStructure {
  id           String      @id @default(cuid())
  name         String
  amount       Float
  interval     String // ONE_TIME, MONTHLY, QUARTERLY, ANNUALLY
  schoolId     String
  penaltyRuleId String?
  school       School      @relation(fields: [schoolId], references: [id])
  penaltyRule  PenaltyRule? @relation(fields: [penaltyRuleId], references: [id])
  invoices     FeeInvoice[]
  concessions  Concession[] @relation("FeeStructureConcessions")
}

model PenaltyRule {
  id          String         @id @default(cuid())
  name        String
  gracePeriod Int
  schoolId    String
  school      School         @relation(fields: [schoolId], references: [id])
  tiers       PenaltyTier[]
  feeStructures FeeStructure[]
}

model PenaltyTier {
  id          String      @id @default(cuid())
  penaltyRuleId String
  fromDay     Int
  toDay       Int?
  type        String // PERCENTAGE, FIXED
  value       Float
  frequency   String // DAILY, ONE_TIME
  penaltyRule PenaltyRule @relation(fields: [penaltyRuleId], references: [id], onDelete: Cascade)
}

model Concession {
  id                  String                 @id @default(cuid())
  name                String
  type                String // PERCENTAGE, FIXED
  value               Float
  description         String?
  schoolId            String
  school              School                 @relation(fields: [schoolId], references: [id])
  assignments         ConcessionAssignment[]
  feeStructures       FeeStructure[]         @relation("FeeStructureConcessions")
}

model ConcessionAssignment {
  id             String       @id @default(cuid())
  studentId      String
  concessionId   String
  academicYearId String
  student        Student      @relation(fields: [studentId], references: [id])
  concession     Concession   @relation(fields: [concessionId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  invoices       FeeInvoice[]

  @@unique([studentId, concessionId, academicYearId])
}

model FeeInvoice {
  id                 String                 @id @default(cuid())
  studentId          String
  feeStructureId     String
  academicYearId     String
  amount             Float
  dueDate            DateTime
  status             String // PENDING, PAID, OVERDUE, CANCELLED
  student            Student                @relation(fields: [studentId], references: [id])
  feeStructure       FeeStructure           @relation(fields: [feeStructureId], references: [id])
  academicYear       AcademicYear           @relation(fields: [academicYearId], references: [id])
  payments           FeePayment[]
  concessionAssignments ConcessionAssignment[]
}

model FeePayment {
  id        String   @id @default(cuid())
  invoiceId String
  amount    Float
  paymentDate DateTime @default(now())
  method    String // BANK_TRANSFER, CASH, WALLET
  status    String // COMPLETED, PENDING_VERIFICATION, FAILED
  reference String?
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  invoice   FeeInvoice @relation(fields: [invoiceId], references: [id])
}

// Communication
model Communication {
  id         String   @id @default(cuid())
  schoolId   String
  senderId   String
  receiverId String
  studentId  String?
  subject    String
  message    String
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)
  school     School   @relation(fields: [schoolId], references: [id])
  sender     User     @relation("SentCommunications", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedCommunications", fields: [receiverId], references: [id])
  student    Student? @relation(fields: [studentId], references: [id])
}

// E-Learning
model LearningMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  subject     String
  gradeId     String
  type        String // VIDEO, DOCUMENT, QUIZ
  url         String?
  schoolId    String
  uploaderId  String
  createdAt   DateTime @default(now())
  school      School   @relation(fields: [schoolId], references: [id])
  grade       Grade    @relation(fields: [gradeId], references: [id])
  uploader    User     @relation("UploadedBy", fields: [uploaderId], references: [id])
}

// Tests
model Test {
  id                String           @id @default(cuid())
  name              String
  gradeId           String
  sectionId         String
  subject           String
  teacherId         String
  startTime         DateTime
  endTime           DateTime
  duration          Int // in minutes
  totalMarks        Int
  isMock            Boolean
  resultVisibility  String // IMMEDIATE, AFTER_END_TIME
  status            String // UPCOMING, ACTIVE, COMPLETED
  schoolId          String
  school            School           @relation(fields: [schoolId], references: [id])
  grade             Grade            @relation(fields: [gradeId], references: [id])
  section           Section          @relation(fields: [sectionId], references: [id])
  teacher           User             @relation("CreatedBy", fields: [teacherId], references: [id])
  questions         Question[]
  submissions       TestSubmission[]
}

model Question {
  id            String         @id @default(cuid())
  testId        String
  text          String
  type          String // MULTIPLE_CHOICE, TRUE_FALSE, FILL_IN_THE_BLANK
  options       String? // JSON string for options
  correctAnswer String
  points        Int
  test          Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers       TestAnswer[]
}

model TestSubmission {
  id         String       @id @default(cuid())
  testId     String
  studentId  String
  submittedAt DateTime
  score      Int
  status     String // IN_PROGRESS, AWAITING_APPROVAL, GRADED
  test       Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  student    Student      @relation(fields: [studentId], references: [id])
  answers    TestAnswer[]

  @@unique([testId, studentId])
}

model TestAnswer {
  id           String       @id @default(cuid())
  submissionId String
  questionId   String
  answer       String
  submission   TestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// Exams & Results
model Exam {
  id             String       @id @default(cuid())
  name           String
  weightage      Float
  gradingType    String // DECIMAL, LETTER
  academicYearId String
  gradeId        String
  sectionId      String
  subject        String
  schoolId       String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  grade          Grade        @relation(fields: [gradeId], references: [id])
  section        Section      @relation(fields: [sectionId], references: [id])
  school         School       @relation(fields: [schoolId], references: [id])
  results        ExamResult[]
}

model ExamResult {
  id         String  @id @default(cuid())
  examId     String
  studentId  String
  score      String
  status     String // PENDING, PENDING_APPROVAL, APPROVED, PENDING_REAPPROVAL, FINALIZED
  exam       Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  student    Student @relation(fields: [studentId], references: [id])

  @@unique([examId, studentId])
}

// Live Sessions
model LiveSession {
  id            String                    @id @default(cuid())
  topic         String
  description   String?
  subject       String
  gradeId       String
  startTime     DateTime
  duration      Int // in minutes
  fee           Float                     @default(0)
  status        String // UPCOMING, ACTIVE, COMPLETED
  meetingUrl    String?
  teacherId     String
  schoolId      String
  grade         Grade                     @relation(fields: [gradeId], references: [id])
  teacher       Staff                     @relation(fields: [teacherId], references: [id])
  school        School                    @relation(fields: [schoolId], references: [id])
  registrations LiveSessionRegistration[]
}

model LiveSessionRegistration {
  id            String      @id @default(cuid())
  liveSessionId String
  studentId     String
  registeredAt  DateTime    @default(now())
  liveSession   LiveSession @relation(fields: [liveSessionId], references: [id])
  student       Student     @relation(fields: [studentId], references: [id])

  @@unique([liveSessionId, studentId])
}
