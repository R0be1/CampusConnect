// datasource db defines the database connection settings.
// It's configured for PostgreSQL.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client should be generated for TypeScript.
generator client {
  provider = "prisma-client-js"
}

// --- CORE MODELS ---

// School model represents an educational institution.
model School {
  id            String         @id @default(cuid())
  name          String
  accountName   String         @unique
  branch        String
  contactPerson String
  phone         String
  address       String
  logoUrl       String?
  users         User[]
  academicYears AcademicYear[]
  grades        Grade[]
  sections      Section[]
  staff         Staff[]
  students      Student[]
  parents       Parent[]
  courses       Course[]
  feeStructures FeeStructure[]
  concessions   Concession[]
  penaltyRules  PenaltyRule[]
  learningMaterials LearningMaterial[]
  liveSessions  LiveSession[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// User model for authentication, with roles for different access levels.
model User {
  id           String    @id @default(cuid())
  phone        String    @unique
  password     String
  role         Role
  school       School    @relation(fields: [schoolId], references: [id])
  schoolId     String
  staffProfile Staff?
  studentProfile Student?
  parentProfile  Parent?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum Role {
  SYSTEM_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
  PARENT
}

// --- PROFILE MODELS ---

// Staff model for teachers and other school employees.
model Staff {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  firstName String
  lastName  String
  staffType StaffType
  courses   Course[]
  markedAttendance Attendance[] @relation("markedBy")
  createdTests     Test[]
  uploadedMaterials LearningMaterial[]
  scheduledLiveSessions LiveSession[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StaffType {
  TEACHER
  ADMIN
  PRINCIPAL
}

// Student model represents a student enrolled in the school.
model Student {
  id                 String                  @id @default(cuid())
  user               User                    @relation(fields: [userId], references: [id])
  userId             String                  @unique
  school             School                  @relation(fields: [schoolId], references: [id])
  schoolId           String
  firstName          String
  lastName           String
  dob                DateTime
  gender             Gender
  grade              Grade                   @relation(fields: [gradeId], references: [id])
  gradeId            String
  section            Section                 @relation(fields: [sectionId], references: [id])
  sectionId          String
  parents            Parent[]
  enrollments        Enrollment[]
  attendances        Attendance[]
  feeInvoices        FeeInvoice[]
  testSubmissions    TestSubmission[]
  liveSessionRegistrations LiveSessionRegistration[]
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Parent model for parents or guardians of students.
model Parent {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  firstName String
  lastName  String
  children  Student[]
  communications Communication[] @relation("parent")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// --- ACADEMICS & SCHOOL STRUCTURE ---

model AcademicYear {
  id          String       @id @default(cuid())
  name        String
  isCurrent   Boolean      @default(false)
  school      School       @relation(fields: [schoolId], references: [id])
  schoolId    String
  enrollments Enrollment[]
  feeInvoices FeeInvoice[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  @@unique([name, schoolId])
}

model Grade {
  id        String    @id @default(cuid())
  name      String
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  sections  Section[]
  students  Student[]
  courses   Course[]
  tests     Test[]
  learningMaterials LearningMaterial[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([name, schoolId])
}

model Section {
  id        String    @id @default(cuid())
  name      String
  grade     Grade     @relation(fields: [gradeId], references: [id])
  gradeId   String
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  students  Student[]
  courses   Course[]
  tests     Test[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([name, gradeId, schoolId])
}

model Course {
  id          String       @id @default(cuid())
  name        String
  grade       Grade        @relation(fields: [gradeId], references: [id])
  gradeId     String
  section     Section?     @relation(fields: [sectionId], references: [id])
  sectionId   String?
  teacher     Staff        @relation(fields: [teacherId], references: [id])
  teacherId   String
  school      School       @relation(fields: [schoolId], references: [id])
  schoolId    String
  enrollments Enrollment[]
  results     Result[]
  exams       Exam[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Enrollment {
  id             String       @id @default(cuid())
  student        Student      @relation(fields: [studentId], references: [id])
  studentId      String
  course         Course       @relation(fields: [courseId], references: [id])
  courseId       String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  @@unique([studentId, courseId, academicYearId])
}

model Attendance {
  id        String   @id @default(cuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  date      DateTime @db.Date
  status    AttendanceStatus
  markedBy  Staff    @relation("markedBy", fields: [markedById], references: [id])
  markedById String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([studentId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

// --- E-LEARNING ---

model LearningMaterial {
  id          String   @id @default(cuid())
  title       String
  description String
  subject     String
  grade       Grade    @relation(fields: [gradeId], references: [id])
  gradeId     String
  type        MaterialType
  url         String?
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  uploader    Staff    @relation(fields: [uploaderId], references: [id])
  uploaderId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MaterialType {
  VIDEO
  DOCUMENT
  AUDIO
  IMAGE
}

// --- LIVE SESSIONS ---

model LiveSession {
  id             String                  @id @default(cuid())
  topic          String
  description    String
  subject        String
  gradeId        String
  dateTime       DateTime
  duration       Int // in minutes
  fee            Float                   @default(0)
  school         School                  @relation(fields: [schoolId], references: [id])
  schoolId       String
  teacher        Staff                   @relation(fields: [teacherId], references: [id])
  teacherId      String
  status         SessionStatus           @default(UPCOMING)
  registrations  LiveSessionRegistration[]
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
}

enum SessionStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

model LiveSessionRegistration {
  id            String      @id @default(cuid())
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     String
  liveSession   LiveSession @relation(fields: [liveSessionId], references: [id])
  liveSessionId String
  registeredAt  DateTime    @default(now())
  @@unique([studentId, liveSessionId])
}

// --- FEES & PAYMENTS ---

model FeeStructure {
  id            String       @id @default(cuid())
  name          String
  amount        Float
  interval      FeeInterval
  school        School       @relation(fields: [schoolId], references: [id])
  schoolId      String
  penaltyRule   PenaltyRule? @relation(fields: [penaltyRuleId], references: [id])
  penaltyRuleId String?
  invoices      FeeInvoice[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum FeeInterval {
  ONE_TIME
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

model PenaltyRule {
  id             String         @id @default(cuid())
  name           String
  gracePeriod    Int // in days
  school         School         @relation(fields: [schoolId], references: [id])
  schoolId       String
  feeStructures  FeeStructure[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Concession {
  id          String                 @id @default(cuid())
  name        String
  type        ConcessionType
  value       Float
  description String
  school      School                 @relation(fields: [schoolId], references: [id])
  schoolId    String
  assignments ConcessionAssignment[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

enum ConcessionType {
  PERCENTAGE
  FIXED_AMOUNT
}

model ConcessionAssignment {
  id           String       @id @default(cuid())
  studentId    String
  concession   Concession   @relation(fields: [concessionId], references: [id])
  concessionId String
  feeInvoice   FeeInvoice   @relation(fields: [feeInvoiceId], references: [id])
  feeInvoiceId String
  createdAt    DateTime     @default(now())
}

model FeeInvoice {
  id               String                 @id @default(cuid())
  student          Student                @relation(fields: [studentId], references: [id])
  studentId        String
  feeStructure     FeeStructure           @relation(fields: [feeStructureId], references: [id])
  feeStructureId   String
  academicYear     AcademicYear           @relation(fields: [academicYearId], references: [id])
  academicYearId   String
  amount           Float
  dueDate          DateTime
  status           InvoiceStatus
  payments         FeePayment[]
  concessions      ConcessionAssignment[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model FeePayment {
  id        String       @id @default(cuid())
  invoice   FeeInvoice   @relation(fields: [invoiceId], references: [id])
  invoiceId String
  amount    Float
  date      DateTime
  method    PaymentMethod
  notes     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  ONLINE
}

// --- RESULTS & EXAMS (Distinct from Tests) ---

model Exam {
  id          String   @id @default(cuid())
  name        String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  date        DateTime
  maxMarks    Int
  results     Result[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Result {
  id        String   @id @default(cuid())
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    String
  studentId String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  marks     Float
  grade     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- ONLINE TESTS ---

model Test {
  id               String           @id @default(cuid())
  name             String
  grade            Grade            @relation(fields: [gradeId], references: [id])
  gradeId          String
  section          Section          @relation(fields: [sectionId], references: [id])
  sectionId        String
  subject          String
  teacher          Staff            @relation(fields: [teacherId], references: [id])
  teacherId        String
  startTime        DateTime
  endTime          DateTime
  duration         Int // in minutes
  isMock           Boolean
  resultVisibility ResultVisibility
  questions        Question[]
  submissions      TestSubmission[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

enum ResultVisibility {
  IMMEDIATE
  AFTER_END_TIME
}

model Question {
  id            String   @id @default(cuid())
  test          Test     @relation(fields: [testId], references: [id])
  testId        String
  text          String
  type          QuestionType
  options       String[]
  correctAnswer String
  answers       TestAnswer[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
}

model TestSubmission {
  id             String       @id @default(cuid())
  test           Test         @relation(fields: [testId], references: [id])
  testId         String
  student        Student      @relation(fields: [studentId], references: [id])
  studentId      String
  submittedAt    DateTime
  score          Float
  status         SubmissionStatus @default(AWAITING_APPROVAL)
  answers        TestAnswer[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum SubmissionStatus {
    IN_PROGRESS
    SUBMITTED
    AWAITING_APPROVAL
    GRADED
}

model TestAnswer {
  id           String         @id @default(cuid())
  submission   TestSubmission @relation(fields: [submissionId], references: [id])
  submissionId String
  question     Question       @relation(fields: [questionId], references: [id])
  questionId   String
  answer       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// --- COMMUNICATION ---

model Communication {
  id         String   @id @default(cuid())
  parent     Parent   @relation("parent", fields: [parentId], references: [id])
  parentId   String
  subject    String
  message    String
  sentBy     String // Could be teacher's name or 'Admin'
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
