// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
  PARENT
  ACCOUNTANT
}

enum StaffType {
  TEACHER
  ACCOUNTANT
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeInterval {
  ONE_TIME
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum ConcessionType {
  PERCENTAGE
  FIXED
}

enum PenaltyType {
  PERCENTAGE
  FIXED
}

enum PenaltyFrequency {
  DAILY
  ONE_TIME
}

enum FeeInvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING_VERIFICATION
  COMPLETED
  FAILED
}

enum ResultStatus {
  PENDING
  PENDING_APPROVAL
  APPROVED
  PENDING_REAPPROVAL
  FINALIZED
  REJECTED
}

enum LearningMaterialType {
  VIDEO
  DOCUMENT
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
}

enum TestStatus {
  UPCOMING
  ACTIVE
  COMPLETED
}

enum TestResultVisibility {
  IMMEDIATE
  AFTER_END_TIME
}

// --- Models ---

model School {
  id                String                @id @default(cuid())
  name              String
  accountName       String                @unique
  branch            String
  contactPerson     String
  phone             String
  address           String
  logoUrl           String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  users             User[]
  grades            Grade[]
  sections          Section[]
  academicYears     AcademicYear[]
  students          Student[]
  staff             Staff[]
  parents           Parent[]
  courses           Course[]
  feeStructures     FeeStructure[]
  concessions       Concession[]
  penaltyRules      PenaltyRule[]
  feePayments       FeePayment[]
  learningMaterials LearningMaterial[]
  tests             Test[]
  exams             Exam[]
}

model User {
  id                     String          @id @default(cuid())
  phone                  String          @unique
  password               String
  role                   UserRole
  schoolId               String
  firstName              String
  lastName               String
  middleName             String?
  addressLine1           String?
  city                   String?
  state                  String?
  zipCode                String?
  photoUrl               String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  school                 School          @relation(fields: [schoolId], references: [id])
  staffProfile           Staff?
  studentProfile         Student?
  parentProfile          Parent?
  sentCommunications     Communication[] @relation("SentCommunications")
  receivedCommunications Communication[] @relation("ReceivedCommunications")
  attendanceMarkedBy     Attendance[]
  materialsUploaded      LearningMaterial[]
  testsCreated           Test[]
}

model Grade {
  id                String               @id @default(cuid())
  name              String               @unique
  schoolId          String
  school            School               @relation(fields: [schoolId], references: [id])
  students          Student[]
  courses           Course[]
  exams             Exam[]
  tests             Test[]
  liveSessions      LiveSession[]
  learningMaterials LearningMaterial[]
}

model Section {
  id       String    @id @default(cuid())
  name     String    @unique
  schoolId String
  school   School    @relation(fields: [schoolId], references: [id])
  students Student[]
  courses  Course[]
  exams    Exam[]
  tests    Test[]
}

model AcademicYear {
  id                    String                 @id @default(cuid())
  name                  String
  isCurrent             Boolean                @default(false)
  schoolId              String
  school                School                 @relation(fields: [schoolId], references: [id])
  enrollments           Enrollment[]
  feeInvoices           FeeInvoice[]
  concessionAssignments ConcessionAssignment[]
  exams                 Exam[]

  @@unique([name, schoolId])
}

model Student {
  id                         String                    @id @default(cuid())
  userId                     String                    @unique
  user                       User                      @relation(fields: [userId], references: [id])
  schoolId                   String
  school                     School                    @relation(fields: [schoolId], references: [id])
  gradeId                    String
  grade                      Grade                     @relation(fields: [gradeId], references: [id])
  sectionId                  String
  section                    Section                   @relation(fields: [sectionId], references: [id])
  firstName                  String
  lastName                   String
  dob                        DateTime
  gender                     Gender
  enrollments                Enrollment[]
  attendances                Attendance[]
  feeInvoices                FeeInvoice[]
  parents                    Parent[]                  @relation("ParentStudent")
  examResults                ExamResult[]
  testSubmissions            TestSubmission[]
  concessionAssignments      ConcessionAssignment[]
  liveSessionRegistrations   LiveSessionRegistration[]
  communications             Communication[]
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
}

model Staff {
  id           String        @id @default(cuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  schoolId     String
  school       School        @relation(fields: [schoolId], references: [id])
  firstName    String
  lastName     String
  staffType    StaffType
  courses      Course[]
  attendance   Attendance[]  @relation("MarkedBy")
  liveSessions LiveSession[]
}

model Parent {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  schoolId          String
  school            School    @relation(fields: [schoolId], references: [id])
  firstName         String
  lastName          String
  relationToStudent String?
  students          Student[] @relation("ParentStudent")
}

model Attendance {
  id         String           @id @default(cuid())
  studentId  String
  student    Student          @relation(fields: [studentId], references: [id])
  date       DateTime         @db.Date
  status     AttendanceStatus
  notes      String?
  markedById String
  markedBy   Staff            @relation("MarkedBy", fields: [markedById], references: [userId])

  @@unique([studentId, date])
}

model Course {
  id          String       @id @default(cuid())
  name        String
  gradeId     String
  grade       Grade        @relation(fields: [gradeId], references: [id])
  sectionId   String
  section     Section      @relation(fields: [sectionId], references: [id])
  teacherId   String
  teacher     Staff        @relation(fields: [teacherId], references: [id])
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id])
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name, gradeId, sectionId])
}

model Enrollment {
  id             String       @id @default(cuid())
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id])
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  results        Result[]

  @@unique([studentId, courseId, academicYearId])
}

model Result {
  id           String     @id @default(cuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  grade        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model FeeStructure {
  id            String         @id @default(cuid())
  name          String
  amount        Float
  interval      FeeInterval
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
  invoices      FeeInvoice[]
  penaltyRuleId String?
  penaltyRule   PenaltyRule?   @relation(fields: [penaltyRuleId], references: [id])
  concessions   Concession[]   @relation("FeeStructureConcession")
}

model Concession {
  id                    String                 @id @default(cuid())
  name                  String
  type                  ConcessionType
  value                 Float
  description           String?
  schoolId              String
  school                School                 @relation(fields: [schoolId], references: [id])
  feeStructures         FeeStructure[]         @relation("FeeStructureConcession")
  concessionAssignments ConcessionAssignment[]
}

model ConcessionAssignment {
  id             String       @id @default(cuid())
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id])
  concessionId   String
  concession     Concession   @relation(fields: [concessionId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  invoices       FeeInvoice[]

  @@unique([studentId, concessionId, academicYearId])
}

model PenaltyRule {
  id            String         @id @default(cuid())
  name          String
  gracePeriod   Int
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
  tiers         PenaltyTier[]
  feeStructures FeeStructure[]
}

model PenaltyTier {
  id            String           @id @default(cuid())
  penaltyRuleId String
  penaltyRule   PenaltyRule      @relation(fields: [penaltyRuleId], references: [id])
  fromDay       Int
  toDay         Int?
  type          PenaltyType
  value         Float
  frequency     PenaltyFrequency
}

model FeeInvoice {
  id                      String                 @id @default(cuid())
  studentId               String
  student                 Student                @relation(fields: [studentId], references: [id])
  feeStructureId          String
  feeStructure            FeeStructure           @relation(fields: [feeStructureId], references: [id])
  academicYearId          String
  academicYear            AcademicYear           @relation(fields: [academicYearId], references: [id])
  concessionAssignments   ConcessionAssignment[]
  amount                  Float
  dueDate                 DateTime
  status                  FeeInvoiceStatus
  payments                FeePayment[]
}

model FeePayment {
  id          String        @id @default(cuid())
  invoiceId   String
  invoice     FeeInvoice    @relation(fields: [invoiceId], references: [id])
  amount      Float
  paymentDate DateTime
  method      String
  status      PaymentStatus
  reference   String?
  schoolId    String
  school      School        @relation(fields: [schoolId], references: [id])
}

model Communication {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  studentId  String
  subject    String
  message    String
  read       Boolean  @default(false)
  sentAt     DateTime @default(now())
  schoolId   String

  sender   User    @relation("SentCommunications", fields: [senderId], references: [id])
  receiver User    @relation("ReceivedCommunications", fields: [receiverId], references: [id])
  student  Student @relation(fields: [studentId], references: [id])
}

model LearningMaterial {
  id          String               @id @default(cuid())
  title       String
  description String?
  subject     String
  gradeId     String
  grade       Grade                @relation(fields: [gradeId], references: [id])
  type        LearningMaterialType
  url         String?
  uploaderId  String
  uploader    User                 @relation(fields: [uploaderId], references: [id])
  schoolId    String
  school      School               @relation(fields: [schoolId], references: [id])
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Test {
  id               String               @id @default(cuid())
  name             String
  gradeId          String
  grade            Grade                @relation(fields: [gradeId], references: [id])
  sectionId        String
  section          Section              @relation(fields: [sectionId], references: [id])
  subject          String
  teacherId        String
  teacher          User                 @relation(fields: [teacherId], references: [id])
  startTime        DateTime
  endTime          DateTime
  duration         Int
  totalMarks       Int
  status           TestStatus           @default(UPCOMING)
  isMock           Boolean
  resultVisibility TestResultVisibility
  schoolId         String
  school           School               @relation(fields: [schoolId], references: [id])
  questions        Question[]
  submissions      TestSubmission[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model Question {
  id            String       @id @default(cuid())
  testId        String
  test          Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  text          String
  type          QuestionType
  options       String
  correctAnswer String
  points        Int
  answers       TestAnswer[]
}

model TestSubmission {
  id          String       @id @default(cuid())
  testId      String
  test        Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  studentId   String
  student     Student      @relation(fields: [studentId], references: [id])
  submittedAt DateTime
  score       Float
  status      String // 'AWAITING_APPROVAL', 'GRADED'
  answers     TestAnswer[]
}

model TestAnswer {
  id           String         @id @default(cuid())
  submissionId String
  submission   TestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id])
  answer       String
}

model Exam {
  id             String       @id @default(cuid())
  name           String
  weightage      Float
  gradingType    String // 'DECIMAL', 'LETTER'
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  gradeId        String
  grade          Grade        @relation(fields: [gradeId], references: [id])
  sectionId      String
  section        Section      @relation(fields: [sectionId], references: [id])
  subject        String
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id])
  results        ExamResult[]
}

model ExamResult {
  id        String       @id @default(cuid())
  examId    String
  exam      Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentId String
  student   Student      @relation(fields: [studentId], references: [id])
  score     String
  status    ResultStatus

  @@unique([examId, studentId])
}

model LiveSession {
  id            String                    @id @default(cuid())
  topic         String
  description   String?
  subject       String
  gradeId       String
  grade         Grade                     @relation(fields: [gradeId], references: [id])
  startTime     DateTime
  duration      Int
  fee           Float                     @default(0)
  status        String // "UPCOMING", "ACTIVE", "COMPLETED"
  teacherId     String
  teacher       Staff                     @relation(fields: [teacherId], references: [id])
  schoolId      String
  school        School                    @relation(fields: [schoolId], references: [id])
  registrations LiveSessionRegistration[]
}

model LiveSessionRegistration {
  id            String      @id @default(cuid())
  liveSessionId String
  liveSession   LiveSession @relation(fields: [liveSessionId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id])
  registeredAt  DateTime    @default(now())

  @@unique([liveSessionId, studentId])
}
